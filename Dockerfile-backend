FROM python:3.11-slim AS python-base

# POETRY -------
#https://github.com/orgs/python-poetry/discussions/1879#discussioncomment-216865
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    \
    # pip
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    \
    # poetry
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    PYSETUP_PATH="/ampere" \
    VENV_PATH="/ampere/.venv"


# prepend poetry and venv to path
ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"

# `builder-base` stage is used to build deps + create our virtual environment
FROM python-base AS builder-base
RUN apt-get update \
    && apt-get install --no-install-recommends -y \
    # deps for installing poetry
    curl \
    # deps for building python deps
    build-essential

# install poetry - respects $POETRY_VERSION & $POETRY_HOME
RUN curl -sSL https://install.python-poetry.org | python3 -

# copy project requirement files here to ensure they will be cached.
WORKDIR $PYSETUP_PATH
COPY poetry.lock pyproject.toml ./

# install runtime deps - uses $POETRY_VIRTUALENVS_IN_PROJECT internally
RUN poetry install --no-dev

# `development` image is used during development / testing
FROM python-base AS development
WORKDIR $PYSETUP_PATH

# copy in our built poetry + venv
COPY --from=builder-base $POETRY_HOME $POETRY_HOME
COPY --from=builder-base $PYSETUP_PATH $PYSETUP_PATH

#https://github.com/python-poetry/poetry/issues/3353#issuecomment-804042557
RUN poetry config virtualenvs.path --unset

# quicker install as runtime deps are already installed
RUN poetry install

# APP CODE -------
COPY ampere/ ./ampere

# DBT ---------
COPY dbt_project.yml .
COPY profiles.yml .
COPY packages.yml .
COPY dbt_packages/ ./dbt_packages
COPY target/ ./target
COPY models/ ./models
COPY data-tests ./data-tests

# GCLOUD ---------
COPY .config/ ./.config
COPY .env .

RUN dbt deps --profiles-dir .

# DAGSTER ------
ENV DAGSTER_HOME=/ampere/data/dagster