name: release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  # ampere was taken :(
  PACKAGE_NAME: "ampere-meter"
  PACKAGE_FILENAME: "ampere_meter"
  OWNER: "jeffbrennan"
  REPO_NAME: "ampere"

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v2

      - name: Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG_NAME"
          else
            echo "No tag found"
            exit 1
          fi

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  setup_and_build:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: install uv
        uses: astral-sh/setup-uv@v5

      - name: Set project version
        # https://github.com/astral-sh/uv/issues/6298#issuecomment-2335034247
        run: |
          uvx --from=toml-cli toml set --toml-path=pyproject.toml project.version  ${{ needs.details.outputs.new_version }}

      - name: Install dependencies
        run: uv sync

      - name: Build source and wheel distribution
        run: |
          uv build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* --title ${{ needs.details.outputs.tag_name }} --generate-notes

  build_homebrew_bottles:
    needs: [setup_and_build, details]
    environment:
      name: release
    strategy:
      matrix:
        os: [macos-latest, macos-14, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

      - name: Checkout Homebrew Tap
        uses: actions/checkout@v3
        with:
          repository: ${{ env.OWNER }}/homebrew-${{ env.PACKAGE_NAME }}
          token: ${{ secrets.BREW_TAP_TOKEN }}

      - name: Install Dependencies
        run: brew install --build-bottle ./Formula/${{ env.PACKAGE_NAME }}.rb

      - name: Build Bottle
        run: |
          brew bottle ${{ env.PACKAGE_NAME }}
          mv ${{ env.PACKAGE_NAME }}--*.tar.gz ${{ env.PACKAGE_NAME }}-${{ runner.os }}.tar.gz

      - name: Upload Bottles
        uses: actions/upload-artifact@v4
        with:
          name: homebrew-bottles
          path: ${{ env.PACKAGE_NAME }}-*.tar.gz

  update_homebrew_tap:
    needs: [build_homebrew_bottles, details]
    environment:
      name: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Homebrew Tap
        uses: actions/checkout@v3
        with:
          repository: ${{ env.OWNER }}/homebrew-${{ env.PACKAGE_NAME }}
          token: ${{ secrets.BREW_TAP_TOKEN }}

      - name: Download Bottles
        uses: actions/download-artifact@v4
        with:
          name: homebrew-bottles

      - name: Download new source tarball
        run: |
          NEW_VERSION="${{ needs.details.outputs.new_version }}"
          NEW_URL="https://github.com/${{ env.OWNER }}/${{ env.REPO_NAME}}/releases/download/${NEW_VERSION}/${{ env.PACKAGE_FILENAME }}-${NEW_VERSION}.tar.gz"

          echo "Fetching: $NEW_URL"
          curl -L -o source.tar.gz "$NEW_URL"

          # Compute SHA-256
          SHA256=$(shasum -a 256 source.tar.gz | awk '{print $1}')
          echo "SHA256: $SHA256"

          echo "NEW_URL=$NEW_URL" >> $GITHUB_ENV
          echo "NEW_SHA256=$SHA256" >> $GITHUB_ENV

      - name: Extract SHAs for Bottles
        run: |
          FORMULA_PATH="Formula/${{ env.PACKAGE_NAME }}.rb"

          for file in ${{ env.PACKAGE_NAME }}-*.tar.gz; do
            SHA=$(shasum -a 256 $file | awk '{print $1}')
            if [[ $file == *"macos-14"* ]]; then
              sed -i "s|sha256 .* arm64_sequoia: .*|sha256 cellar: :any, arm64_sequoia: \"$SHA\"|" $FORMULA_PATH
            elif [[ $file == *"macos-latest"* ]]; then
              sed -i "s|sha256 .* x86_64: .*|sha256 cellar: :any, x86_64: \"$SHA\"|" $FORMULA_PATH
            elif [[ $file == *"ubuntu-latest"* ]]; then
              sed -i "s|sha256 .* x86_64_linux: .*|sha256 cellar: :any_skip_relocation, x86_64_linux: \"$SHA\"|" $FORMULA_PATH
            fi
          done

      - name: Update Formula URL and SHA
        run: |
          FORMULA_PATH="Formula/${{ env.PACKAGE_NAME }}.rb"

          sed -i "s|url \".*\"|url \"${{ env.NEW_URL }}\"|" $FORMULA_PATH
          sed -i "s|sha256 \".*\"|sha256 \"${{ env.NEW_SHA256 }}\"|" $FORMULA_PATH

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add Formula/${{ env.PACKAGE_NAME }}.rb
          git commit -m "Update ${{ env.PACKAGE_NAME }} to ${{ needs.details.outputs.new_version }}"
          git push origin main
